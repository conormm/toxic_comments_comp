apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
data.frame(apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE))))
data.frame(apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
data.frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
data.frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE))))
data.frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
data.frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE))))
data_frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE))))
data_frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))) %>% unnest()
data_frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))) %>% tidyr::unnest()
data_frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE)))) %>% tidyr::unnest()
data_frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
b = data_frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
closest_ob <- data.frame(
ix_i = apply(prox_mat, 1, function(x) which(x == max(x, na.rm = TRUE)))) %>%
mutate(
closest_ix_j = row.names(.),
group = group,
y_i = df$sepal_length,
y_j = df$sepal_length[.$ix_i],
a = a,
b = b
)
a = data_frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))) %>% tidyr::unnest()
b = data_frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
closest_ob <- data.frame(
ix_i = apply(prox_mat, 1, function(x) which(x == max(x, na.rm = TRUE)))) %>%
mutate(
closest_ix_j = row.names(.),
group = group,
y_i = df$sepal_length,
y_j = df$sepal_length[.$ix_i],
a = a,
b = b
)
closest_ob
closest_ob <- data.frame(
ix_i = apply(prox_mat, 1, function(x) which(x == max(x, na.rm = TRUE)))) %>%
mutate(
closest_ix_j = row.names(.),
group = group,
y_i = df$sepal_length,
y_j = df$sepal_length[.$ix_i]
)
closest_ob
a
b
group_ix_a
group_ix_b
a = data_frame(a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE))))
b = data_frame(b_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_b], na.rm = TRUE))))
z
a
b
a_close = apply(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
a_close
names(a_close)
unnames(a_close)
a_close[1]
a_close[1][1]
a_close[[1]]
a_close[2][[1]]
a_close[2][[1]][1]
a_close[2][[1]][[1]]
map(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
map_rows(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
invoke_rows(prox_mat, 1, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
mP(prox_mat, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
map(prox_mat, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
map_rows(prox_mat, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
invoke_rows(prox_mat, function(x) which(x == max(x[group_ix_a], na.rm = TRUE)))
library(randomForest)
library(dplyr)
library(janitor)
library(purrr)
set.seed(123)
df <- clean_names(as_data_frame(iris))[, 1:4]
group <- sample(c("A", "B"), 1, size = nrow(df))
group_ix_a <- group == 'A'
group_ix_b <- group == 'B'
fit <- randomForest(sepal_length ~ ., data = df, proximity=TRUE)
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat
apply(prox_mat, 1, function(x) max(x, na.rm = TRUE))
apply(prox_mat, 2, function(x) max(x, na.rm = TRUE))
apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
map_int(prox_mat, ~which(x == max(x, na.rm = TRUE)))
map_int(prox_mat, ~which(. == max(., na.rm = TRUE)))
map_int(prox_mat, function(x) which(x == max(., na.rm = TRUE)))
map_int(prox_mat, function(x) which(x == max(x, na.rm = TRUE)))
map_dbl(prox_mat, function(x) which(x == max(x, na.rm = TRUE)))
purrr::pmap(prox_mat,  function(x) which(x == max(x, na.rm = TRUE)))
purrr::pmap(prox_mat,  function(...) which(... == max(x, na.rm = TRUE)))
map_dbl(prox_mat, function(x) max(x, na.rm = TRUE))
map_dbl(prox_mat, function(x) max.col(x))
head(prox_mat)
apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
unname(apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE))))
group
tally(group)
table(group)
t(table(group))
table(group)
data.frame(table(group))
group_ix_a
prox_mat$group <- group
prox_mat$group
prox_mat
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat
prox_mat <- cbind(prox_mat, group)
prox_mat
dim(prox_mat)
unname(apply(prox_mat[, :150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
unname(apply(prox_mat[, 1:150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
unname(apply(prox_mat[, 1:150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
for (i in prox_mat) {
if (i$group == "A") {
prox_mat[group_ix_a] <- 0
} else (
prox_mat[group_ix_b] <- 0
)
}
for (i in group) {
if (group == "A") {
prox_mat[group_ix_a] <- 0
} else (
prox_mat[group_ix_b] <- 0
)
}
warning()
warnings()
for (i in group) {
if (group == "A") {
prox_mat[group_ix_a] <- 0
} else (
prox_mat[group_ix_b] <- 0
)
}
warnings()
unname(apply(prox_mat[, 1:150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat
dim(prox_mat)
unname(apply(prox_mat[, 1:150], 2, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat <- cbind(prox_mat, group)
for (i in group) {
if (group == "A") {
prox_mat[group_ix_a, ] <- 0
} else (
prox_mat[group_ix_b, ] <- 0
)
}
unname(apply(prox_mat[, 1:150], 2, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat <- cbind(prox_mat, group)
unname(apply(prox_mat[, 1:150], 2, function(x) which(x ==  max(x, na.rm = TRUE))))
unname(apply(prox_mat[, 1:150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat <- cbind(prox_mat, group)
for (i in group) {
if (group == "A") {
prox_mat[i, group_ix_a,] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
prox_mat <- fit$proximity
diag(prox_mat) <- 0
prox_mat <- cbind(prox_mat, group)
for (i in group) {
if (group == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in group) {
if (group == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
for (i in seq_along(group)) {
if (group == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
unname(apply(prox_mat[, 1:150], 1, function(x) which(x ==  max(x, na.rm = TRUE))))
group
unname(apply(prox_mat[, 1:150], 2, function(x) which(x ==  max(x, na.rm = TRUE))))
unname(apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat[1, group_ix_a]
group
prox_mat[2, group_ix_a]
prox_mat[2, group_ix_b]
c(45, 6)c(TRUE, FALSE)
d <- c(45, 6); tru <- c(TRUE, FALSE)
d[tru]
d[tru] <- 0
d
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
unname(apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE))))
prox_mat
prox_mat[2, group_ix_b]
prox_mat[2, group_ix_a]
apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
sapply(closest, function(x){as.numeric(x[2])})
unname(sapply(closest, function(x){as.numeric(x[2])}))
closest <- unname(apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE))))
unname(sapply(closest, function(x){as.numeric(x[2])}))
sapply(closest, function(x){as.numeric(x[2])})
closest
sapply(closest, function(x){as.numeric(x[2])})
closest <- apply(prox_mat, 2, function(x) which(x ==  max(x, na.rm = TRUE)))
closest
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest
sapply(closest, function(x){as.numeric(x[1])})
unname(sapply(closest, function(x){as.numeric(x[1])}))
group
cloest
closest
cloest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
closest
group
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
closest
group
group[29]
group[46]
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
closest
group[46]
prox_mat[1, group_ix_a]
prox_mat[1, group_ix_b]
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_b] <- 0
} else (
prox_mat[i, group_ix_a] <- 0
)
}
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_b] <- 0
} else (
prox_mat[i, group_ix_a] <- 0
)
}
prox_mat[1, group_ix_b]
prox_mat[1, group_ix_a]
group
closest
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
closest
group[5]
group[9]
?apply
prox_mat[2, ]
group_ix_a
prox_mat[1, ]
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0
} else (
prox_mat[i, group_ix_b] <- 0
)
}
prox_mat[1, ]
prox_mat[1, group_ix_a]
group
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0L
} else (
prox_mat[i, group_ix_b] <- 0L
)
}
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
group
closest
group[46]
group[43]
group[128]
group[116]
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0L
} else (
prox_mat[i, group_ix_b] <- 0L
)
}
View(prox_mat)
for (i in group) {
print(i)
}
for (i in group) {
if (i == "A") print(i)
}
for (i in group) {
if (i == "A") print(i)
else print(b)
}
for (i in group) {
if (i == "A") print(i)
else print("B")
}
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (i == "A") {
prox_mat[i, group_ix_a] <- 0L
}
}
prox_mat[, 1]
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
}
}
prox_mat[, 1]
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
else {
prox_mat[i, group_ix_b] <- 0L
}}
}
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
else ()
prox_mat[i, group_ix_b] <- 0L
)}
}
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
} else {
prox_mat[i, group_ix_b] <- 0L
}
}
prox_mat[, 1]
group
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest <- unname(sapply(closest, function(x){as.numeric(x[1])}))
closest
group
group[5]
group[46]
View(prox_mat)
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
cloest
group[29]
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
} else {
prox_mat[i, group_ix_b] <- 0L
}
}
closest <- apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
closest
group
group[46]
group[50]
group[35]
unname(cloest)
closest_ob <- data.frame(
ix_i = cloest) %>%
mutate(
closest_ix_j = row.names(.),
group = group,
y_i = df$sepal_length,
y_j = df$sepal_length[.$ix_i]
)
closest_ob
closest_ob <- data.frame(
closest_ix_j = cloest) %>%
mutate(
ix_i = row.names(.),
y_i = df$sepal_length,
y_j = df$sepal_length[.$closest_ix_j]
)
closest_ob
closest_ob <- data.frame(
ix_i = row.names(.)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[.$closest_ix_j]
)
closest_ob <- data.frame(
ix_i = row.names(prox_mat)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[.$closest_ix_j]
)
closest_ob <- data.frame(
ix_i = row.names(df)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[.$closest_ix_j]
)
data.frame(
ix_i = row.names(df)
)
closest <- unname(
apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
)
closest_ob <- data.frame(
ix_i = row.names(df)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[.$closest_ix_j]
)
closest
closest_ob <- data.frame(
ix_i = row.names(df)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[closest]
)
closest_ob
df
set.seed(123)
df <- clean_names(as_data_frame(iris))[, 1:4]
group <- sample(c("A", "B"), 1, size = nrow(df))
group_ix_a <- group == 'A'
group_ix_b <- group == 'B'
fit <- randomForest(sepal_length ~ ., data = df, proximity=TRUE)
prox_mat <- fit$proximity
diag(prox_mat) <- 0
#prox_mat <- cbind(prox_mat, group)
for (i in seq_along(group)) {
if (group[i] == "A") {
prox_mat[i, group_ix_a] <- 0L
} else {
prox_mat[i, group_ix_b] <- 0L
}
}
closest <- unname(
apply(prox_mat, 1, function(x) which(x ==  max(x, na.rm = TRUE)))
)
closest_ob <- data.frame(
ix_i = row.names(df)
) %>%
mutate(
closest_ix_j = closest,
y_i = df$sepal_length,
y_j = df$sepal_length[closest]
)
closest_ob
getwd()
